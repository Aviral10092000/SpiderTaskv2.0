COUNTING_SORT
	/*
	For simplicity, consider the data in the range 0 to 9. 
	Input data: 1, 4, 1, 2, 7, 5, 2
  1) Take a count array to store the count of each unique object.
  Index:     0  1  2  3  4  5  6  7  8  9
  Count:     0  2  2  0   1  1  0  1  0  0

  2) Modify the count array such that each element at each index 
  stores the sum of previous counts. 
  Index:     0  1  2  3  4  5  6  7  8  9
  Count:     0  2  4  4  5  6  6  7  7  7

	The modified count array indicates the position of each object in 
	the output sequence.
 
  3) Output each object from the input sequence followed by 
  decreasing its count by 1.
  Process the input data: 1, 4, 1, 2, 7, 5, 2. Position of 1 is 2.
  Put data 1 at index 2 in output. Decrease count by 1 to place 
  next data 1 at an index 1 smaller than this index.
  */
  
  Hash_1
  For hashing just look down in the code
  
  Radix_sort
  	/*
	Basic idea
	Let original, unsorted list:
	170, 45, 75, 90, 802, 24, 2, 66
	Sorting by least significant digit (1s place) gives: [*Notice that we keep 802 before 2, because 802 occurred before 2 in the original list, and similarly for pairs 170 & 90 and 45 & 75.]
	170, 90, 802, 2, 24, 45, 75, 66
	Sorting by next digit (10s place) gives: [*Notice that 802 again comes before 2 as 802 comes before 2 in the previous list.]
	802, 2, 24, 45, 66, 170, 75, 90
	Sorting by most significant digit (100s place) gives:
	2, 24, 45, 66, 75, 90, 170, 802
	Result - 2,24,45,66,75,90,170,802
	*/
	
